# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `render_async` gem.
# Please instead update this file by running `bin/tapioca gem render_async`.

module RenderAsync
  class << self
    # Returns the value of attribute configuration.
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    def configuration=(_arg0); end

    # @yield [configuration]
    def configure; end

    def reset; end
  end
end

class RenderAsync::Configuration
  # @return [Configuration] a new instance of Configuration
  def initialize; end

  # Returns the value of attribute jquery.
  def jquery; end

  # Sets the attribute jquery
  #
  # @param value the value to set the attribute jquery to.
  def jquery=(_arg0); end

  # Returns the value of attribute nonces.
  def nonces; end

  # Sets the attribute nonces
  #
  # @param value the value to set the attribute nonces to.
  def nonces=(_arg0); end

  # Returns the value of attribute replace_container.
  def replace_container; end

  # Sets the attribute replace_container
  #
  # @param value the value to set the attribute replace_container to.
  def replace_container=(_arg0); end

  # Returns the value of attribute turbo.
  def turbo; end

  # Sets the attribute turbo
  #
  # @param value the value to set the attribute turbo to.
  def turbo=(_arg0); end

  # Returns the value of attribute turbolinks.
  def turbolinks; end

  # Sets the attribute turbolinks
  #
  # @param value the value to set the attribute turbolinks to.
  def turbolinks=(_arg0); end
end

class RenderAsync::Engine < ::Rails::Engine
  class << self
    def __callbacks; end
  end
end

RenderAsync::VERSION = T.let(T.unsafe(nil), String)

module RenderAsync::ViewHelper
  def render_async(path, options = T.unsafe(nil), &placeholder); end
  def render_async_cache(path, options = T.unsafe(nil), &placeholder); end
  def render_async_cache_key(path); end

  private

  def configuration; end
  def container_element_options(options); end
  def content_for_options(options); end
  def error_handling_options(options); end
  def generate_container_id; end
  def html_options(options); end
  def polling_options(options); end
  def replace_container(options); end
  def request_options(options); end
  def retry_options(options); end
end
