# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `slop` gem.
# Please instead update this file by running `bin/tapioca gem slop`.

class Slop
  include ::Enumerable

  # Create a new instance of Slop and optionally build options via a block.
  #
  # config - A Hash of configuration options.
  # block  - An optional block used to specify options.
  #
  # @return [Slop] a new instance of Slop
  def initialize(config = T.unsafe(nil), &block); end

  # Fetch an options argument value.
  #
  # key - The Symbol or String option short or long flag.
  #
  # Returns the Object value for this option, or nil.
  def [](key); end

  # Add a callback.
  #
  # label - The Symbol identifier to attach this callback.
  #
  # Returns nothing.
  def add_callback(label, &block); end

  # Get or set the banner.
  #
  # banner - The String to set the banner.
  #
  # Returns the banner String.
  def banner(banner = T.unsafe(nil)); end

  # Set the banner.
  #
  # banner - The String to set the banner.
  def banner=(banner); end

  # Add a new command.
  #
  # command - The Symbol or String used to identify this command.
  # options - A Hash of configuration options (see Slop::new)
  #
  # Returns a new instance of Slop mapped to this command.
  def command(command, options = T.unsafe(nil), &block); end

  # The Hash of sub-commands for this Slop instance.
  def commands; end

  # The Hash of configuration options for this Slop instance.
  def config; end

  # Get or set the description (used for commands).
  #
  # desc - The String to set the description.
  #
  # Returns the description String.
  def description(desc = T.unsafe(nil)); end

  # Set the description (used for commands).
  #
  # desc - The String to set the description.
  def description=(desc); end

  # Enumerable interface. Yields each Slop::Option.
  def each(&block); end

  # Fetch a Slop object associated with this command.
  #
  # command - The String or Symbol name of the command.
  #
  # Examples:
  #
  #   opts.command :foo do
  #     on :v, :verbose, 'Enable verbose mode'
  #   end
  #
  #   # ruby run.rb foo -v
  #   opts.fetch_command(:foo).verbose? #=> true
  def fetch_command(command); end

  # Fetch a Slop::Option object.
  #
  # key - The Symbol or String option key.
  #
  # Examples:
  #
  #   opts.on(:foo, 'Something fooey', :argument => :optional)
  #   opt = opts.fetch_option(:foo)
  #   opt.class #=> Slop::Option
  #   opt.accepts_optional_argument? #=> true
  #
  # Returns an Option or nil if none were found.
  def fetch_option(key); end

  # Fetch an options argument value.
  #
  # key - The Symbol or String option short or long flag.
  #
  # Returns the Object value for this option, or nil.
  def get(key); end

  # Print a handy Slop help string.
  #
  # Returns the banner followed by available option help strings.
  def help; end

  # Fetch a list of options which were missing from the parsed list.
  #
  # Examples:
  #
  #   opts = Slop.new do
  #     on :n, :name=
  #     on :p, :password=
  #   end
  #
  #   opts.parse %w[ --name Lee ]
  #   opts.missing #=> ['password']
  #
  # Returns an Array of Strings representing missing options.
  def missing; end

  # Add an Option.
  #
  # objects - An Array with an optional Hash as the last element.
  #
  # Examples:
  #
  #   on '-u', '--username=', 'Your username'
  #   on :v, :verbose, 'Enable verbose mode'
  #
  # Returns the created instance of Slop::Option.
  def on(*objects, &block); end

  # Add an Option.
  #
  # objects - An Array with an optional Hash as the last element.
  #
  # Examples:
  #
  #   on '-u', '--username=', 'Your username'
  #   on :v, :verbose, 'Enable verbose mode'
  #
  # Returns the created instance of Slop::Option.
  def opt(*objects, &block); end

  # Add an Option.
  #
  # objects - An Array with an optional Hash as the last element.
  #
  # Examples:
  #
  #   on '-u', '--username=', 'Your username'
  #   on :v, :verbose, 'Enable verbose mode'
  #
  # Returns the created instance of Slop::Option.
  def option(*objects, &block); end

  # The Array of Slop::Option objects tied to this Slop instance.
  def options; end

  # Parse a list of items, executing and gathering options along the way.
  #
  # items - The Array of items to extract options from (default: ARGV).
  # block - An optional block which when used will yield non options.
  #
  # Returns an Array of original items.
  def parse(items = T.unsafe(nil), &block); end

  # Parse a list of items, executing and gathering options along the way.
  # unlike parse() this method will remove any options and option arguments
  # from the original Array.
  #
  # items - The Array of items to extract options from (default: ARGV).
  # block - An optional block which when used will yield non options.
  #
  # Returns an Array of original items with options removed.
  def parse!(items = T.unsafe(nil), &block); end

  # Check for an options presence.
  #
  # Examples:
  #
  #   opts.parse %w( --foo )
  #   opts.present?(:foo) #=> true
  #   opts.present?(:bar) #=> false
  #
  # Returns true if all of the keys are present in the parsed arguments.
  #
  # @return [Boolean]
  def present?(*keys); end

  # Specify code to be executed when these options are parsed.
  #
  # callable - An object responding to a call method.
  #
  # yields - The instance of Slop parsing these options
  #          An Array of unparsed arguments
  #
  # Example:
  #
  #   Slop.parse do
  #     on :v, :verbose
  #
  #     run do |opts, args|
  #       puts "Arguments: #{args.inspect}" if opts.verbose?
  #     end
  #   end
  def run(callable = T.unsafe(nil), &block); end

  # Add string separators between options.
  #
  # text - The String text to print.
  def separator(text); end

  # Is strict mode enabled?
  #
  # Returns true if strict mode is enabled, false otherwise.
  #
  # @return [Boolean]
  def strict?; end

  # Returns a new Hash with option flags as keys and option values as values.
  #
  # include_commands - If true, merge options from all sub-commands.
  def to_h(include_commands = T.unsafe(nil)); end

  # Returns a new Hash with option flags as keys and option values as values.
  #
  # include_commands - If true, merge options from all sub-commands.
  def to_hash(include_commands = T.unsafe(nil)); end

  # Print a handy Slop help string.
  #
  # Returns the banner followed by available option help strings.
  def to_s; end

  private

  # Autocreate an option on the fly. See the :autocreate Slop config option.
  #
  # items - The Array of items we're parsing.
  # index - The current Integer index for the item we're processing.
  #
  # Returns nothing.
  def autocreate(items, index); end

  # Build an option from a list of objects.
  #
  # objects - An Array of objects used to build this option.
  #
  # Returns a new instance of Slop::Option.
  def build_option(objects, &block); end

  # Remove any leading -- characters from a string.
  #
  # object - The Object we want to cast to a String and clean.
  #
  # Returns the newly cleaned String with leading -- characters removed.
  def clean(object); end

  def commands_to_help; end

  # Execute a `-abc` type option where a, b and c are all options. This
  # method is only executed if the multiple_switches argument is true.
  #
  # option   - The first Option object.
  # argument - The argument to this option. (Split into multiple Options).
  # items    - The Array of items currently being parsed.
  # index    - The index of the current item being processed.
  #
  # Returns nothing.
  def execute_multiple_switches(option, argument, items, index); end

  # Execute an option, firing off callbacks and assigning arguments.
  #
  # option   - The Slop::Option object found by #process_item.
  # argument - The argument Object to assign to this option.
  # index    - The current Integer index of the object we're processing.
  # item     - The optional String item we're processing.
  #
  # Returns nothing.
  def execute_option(option, argument, index, item = T.unsafe(nil)); end

  # Extract the long flag from an item.
  #
  # objects - The Array of objects passed from #build_option.
  # config  - The Hash of configuration options built in #build_option.
  def extract_long_flag(objects, config); end

  # Extract an option from a flag.
  #
  # flag - The flag key used to extract an option.
  #
  # Returns an Array of [option, argument].
  def extract_option(flag); end

  def extract_short_flag(objects, config); end

  # Convenience method for present?(:option).
  #
  # Examples:
  #
  #   opts.parse %( --verbose )
  #   opts.verbose? #=> true
  #   opts.other?   #=> false
  #
  # Returns true if this option is present. If this method does not end
  # with a ? character it will instead call super().
  def method_missing(method, *args, &block); end

  # Process a list item, figure out if it's an option, execute any
  # callbacks, assign any option arguments, and do some sanity checks.
  #
  # items - The Array of items to process.
  # index - The current Integer index of the item we want to process.
  # block - An optional block which when passed will yield non options.
  #
  # Returns nothing.
  def process_item(items, index, &block); end

  # Override this method so we can check if an option? method exists.
  #
  # Returns true if this option key exists in our list of options.
  #
  # @return [Boolean]
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    # Build a Slop object from a option specification.
    #
    # This allows you to design your options via a simple String rather
    # than programatically. Do note though that with this method, you're
    # unable to pass any advanced options to the on() method when creating
    # options.
    #
    # string - The optspec String
    # config - A Hash of configuration options to pass to Slop.new
    #
    # Examples:
    #
    #   opts = Slop.optspec(<<-SPEC)
    #   ruby foo.rb [options]
    #   ---
    #   n,name=     Your name
    #   a,age=      Your age
    #   A,auth      Sign in with auth
    #   p,passcode= Your secret pass code
    #   SPEC
    #
    #   opts.fetch_option(:name).description #=> "Your name"
    #
    # Returns a new instance of Slop.
    def optspec(string, config = T.unsafe(nil)); end

    # items  - The Array of items to extract options from (default: ARGV).
    # config - The Hash of configuration options to send to Slop.new().
    # block  - An optional block used to add options.
    #
    # Examples:
    #
    #   Slop.parse(ARGV, :help => true) do
    #     on '-n', '--name', 'Your username', :argument => true
    #   end
    #
    # Returns a new instance of Slop.
    def parse(items = T.unsafe(nil), config = T.unsafe(nil), &block); end

    # items  - The Array of items to extract options from (default: ARGV).
    # config - The Hash of configuration options to send to Slop.new().
    # block  - An optional block used to add options.
    #
    # Returns a new instance of Slop.
    def parse!(items = T.unsafe(nil), config = T.unsafe(nil), &block); end
  end
end

class Slop::Commands
  include ::Enumerable

  # Create a new instance of Slop::Commands and optionally build
  # Slop instances via a block. Any configuration options used in
  # this method will be the default configuration options sent to
  # each Slop object created.
  #
  # config - An optional configuration Hash.
  # block  - Optional block used to define commands.
  #
  # Examples:
  #
  #   commands = Slop::Commands.new do
  #     on :new do
  #       on '-o', '--outdir=', 'The output directory'
  #       on '-v', '--verbose', 'Enable verbose mode'
  #     end
  #
  #     on :generate do
  #       on '--assets', 'Generate assets', :default => true
  #     end
  #
  #     global do
  #       on '-D', '--debug', 'Enable debug mode', :default => false
  #     end
  #   end
  #
  #   commands[:new].class #=> Slop
  #   commands.parse
  #
  # @return [Commands] a new instance of Commands
  def initialize(config = T.unsafe(nil), &block); end

  # Fetch the instance of Slop tied to a command.
  #
  # key - The String or Symbol key used to locate this command.
  #
  # Returns the Slop instance if this key is found, nil otherwise.
  def [](key); end

  # Returns the value of attribute arguments.
  def arguments; end

  # Optionally set the banner for this command help output.
  #
  # banner - The String text to set the banner.
  #
  # Returns the String banner if one is set.
  def banner(banner = T.unsafe(nil)); end

  # Sets the attribute banner
  #
  # @param value the value to set the attribute banner to.
  def banner=(_arg0); end

  # Returns the value of attribute commands.
  def commands; end

  # Returns the value of attribute config.
  def config; end

  # Add a Slop instance used when no other commands exist.
  #
  # config - A Hash of configuration options to pass to Slop.
  # block  - An optional block used to pass options to Slop.
  #
  # Returns the newly created Slop instance mapped to default.
  def default(config = T.unsafe(nil), &block); end

  # Enumerable interface.
  def each(&block); end

  # Fetch the instance of Slop tied to a command.
  #
  # key - The String or Symbol key used to locate this command.
  #
  # Returns the Slop instance if this key is found, nil otherwise.
  def get(key); end

  # Add a global Slop instance.
  #
  # config - A Hash of configuration options to pass to Slop.
  # block  - An optional block used to pass options to Slop.
  #
  # Returns the newly created Slop instance mapped to global.
  def global(config = T.unsafe(nil), &block); end

  # Returns the help String.
  def help; end

  # Returns the inspection String.
  def inspect; end

  # Add a Slop instance for a specific command.
  #
  # command - A String or Symbol key used to identify this command.
  # config  - A Hash of configuration options to pass to Slop.
  # block   - An optional block used to pass options to Slop.
  #
  # Returns the newly created Slop instance mapped to command.
  def on(command, config = T.unsafe(nil), &block); end

  # Parse a list of items.
  #
  # items - The Array of items to parse.
  #
  # Returns the original Array of items.
  def parse(items = T.unsafe(nil)); end

  # Parse a list of items, removing any options or option arguments found.
  #
  # items - The Array of items to parse.
  #
  # Returns the original Array of items with options removed.
  def parse!(items = T.unsafe(nil)); end

  # Check for a command presence.
  #
  # Examples:
  #
  #   cmds.parse %w( foo )
  #   cmds.present?(:foo) #=> true
  #   cmds.present?(:bar) #=> false
  #
  # Returns true if the given key is present in the parsed arguments.
  #
  # @return [Boolean]
  def present?(key); end

  # Returns a nested Hash with Slop options and values. See Slop#to_hash.
  def to_hash; end

  # Returns the help String.
  def to_s; end

  private

  # Returns nothing.
  def execute_arguments!(items); end

  # Returns nothing.
  def execute_global_opts!(items); end
end

# Returns a default Hash of configuration options this Slop instance uses.
Slop::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# The main Error class, all Exception classes inherit from this class.
class Slop::Error < ::StandardError; end

# Raised when an argument does not match its intended match constraint.
class Slop::InvalidArgumentError < ::Slop::Error; end

# Raised when an invalid command is found and the strict flag is enabled.
class Slop::InvalidCommandError < ::Slop::Error; end

# Raised when an invalid option is found and the strict flag is enabled.
class Slop::InvalidOptionError < ::Slop::Error; end

# Raised when an option argument is expected but none are given.
class Slop::MissingArgumentError < ::Slop::Error; end

# Raised when an option is expected/required but not present.
class Slop::MissingOptionError < ::Slop::Error; end

class Slop::Option
  # Incapsulate internal option information, mainly used to store
  # option specific configuration data, most of the meat of this
  # class is found in the #value method.
  #
  # slop        - The instance of Slop tied to this Option.
  # short       - The String or Symbol short flag.
  # long        - The String or Symbol long flag.
  # description - The String description text.
  # config      - A Hash of configuration options.
  # block       - An optional block used as a callback.
  #
  # @return [Option] a new instance of Option
  def initialize(slop, short, long, description, config = T.unsafe(nil), &block); end

  # Returns true if this option accepts an optional argument.
  #
  # @return [Boolean]
  def accepts_optional_argument?; end

  # Returns the value of attribute argument_in_value.
  def argument_in_value; end

  # Sets the attribute argument_in_value
  #
  # @param value the value to set the attribute argument_in_value to.
  def argument_in_value=(_arg0); end

  # Call this options callback if one exists, and it responds to call().
  #
  # Returns nothing.
  def call(*objects); end

  # Returns the value of attribute config.
  def config; end

  # Returns the value of attribute count.
  def count; end

  # Sets the attribute count
  #
  # @param value the value to set the attribute count to.
  def count=(_arg0); end

  # Returns the value of attribute description.
  def description; end

  # Returns true if this option expects an argument.
  #
  # @return [Boolean]
  def expects_argument?; end

  # Returns the help String for this option.
  def help; end

  # Returns the String inspection text.
  def inspect; end

  # Returns the String flag of this option. Preferring the long flag.
  def key; end

  # Returns the value of attribute long.
  def long; end

  # Returns the value of attribute short.
  def short; end

  # Returns the help String for this option.
  def to_s; end

  # Returns the value of attribute types.
  def types; end

  # Fetch the argument value for this option.
  #
  # Returns the Object once any type conversions have taken place.
  def value; end

  # Set the new argument value for this option.
  #
  # We use this setter method to handle concatenating lists. That is,
  # when an array type is specified and used more than once, values from
  # both options will be grouped together and flattened into a single array.
  def value=(new_value); end

  private

  # Convert an object to a Float if possible.
  #
  # value - The Object we want to convert to a float.
  #
  # Returns the Float value if possible to convert, else a zero.
  def value_to_float(value); end

  # Convert an object to an Integer if possible.
  #
  # value - The Object we want to convert to an integer.
  #
  # Returns the Integer value if possible to convert, else a zero.
  def value_to_integer(value); end

  # Convert an object to a Range if possible.
  #
  # value - The Object we want to convert to a range.
  #
  # Returns the Range value if one could be found, else the original object.
  def value_to_range(value); end
end

# The default Hash of configuration options this class uses.
Slop::Option::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

Slop::VERSION = T.let(T.unsafe(nil), String)
