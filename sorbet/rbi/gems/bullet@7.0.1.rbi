# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bullet` gem.
# Please instead update this file by running `bin/tapioca gem bullet`.

::RUBY19 = T.let(T.unsafe(nil), TrueClass)

module Bullet
  extend ::Bullet::Dependency

  class << self
    # Returns the value of attribute add_footer.
    def add_footer; end

    # Sets the attribute add_footer
    #
    # @param value the value to set the attribute add_footer to.
    def add_footer=(_arg0); end

    def add_safelist(options); end
    def airbrake=(arg); end
    def alert=(arg); end

    # Rails.root might be nil if `railties` is a dependency on a project that does not use Rails
    def app_root; end

    def appsignal=(arg); end
    def bugsnag=(arg); end
    def bullet_logger=(active); end
    def clear_safelist; end
    def console=(arg); end

    # @return [Boolean]
    def console_enabled?; end

    # Sets the attribute counter_cache_enable
    #
    # @param value the value to set the attribute counter_cache_enable to.
    def counter_cache_enable=(_arg0); end

    # @return [Boolean]
    def counter_cache_enable?; end

    def customized_logger=(arg); end
    def debug(title, message); end
    def delete_safelist(options); end
    def enable=(enable); end

    # @return [Boolean]
    def enable?; end

    def end_request; end
    def footer_info; end
    def gather_inline_notifications; end
    def get_safelist_associations(type, class_name); end
    def honeybadger=(arg); end

    # @return [Boolean]
    def inject_into_page?; end

    # Sets the attribute n_plus_one_query_enable
    #
    # @param value the value to set the attribute n_plus_one_query_enable to.
    def n_plus_one_query_enable=(_arg0); end

    # @return [Boolean]
    def n_plus_one_query_enable?; end

    # @return [Boolean]
    def notification?; end

    def notification_collector; end

    # Returns the value of attribute orm_patches_applied.
    def orm_patches_applied; end

    # Sets the attribute orm_patches_applied
    #
    # @param value the value to set the attribute orm_patches_applied to.
    def orm_patches_applied=(_arg0); end

    def perform_out_of_channel_notifications(env = T.unsafe(nil)); end
    def profile; end
    def rails_logger=(arg); end
    def raise=(should_raise); end
    def reset_safelist; end
    def rollbar=(arg); end

    # Returns the value of attribute safelist.
    def safelist; end

    def sentry=(arg); end

    # Sets the attribute skip_html_injection
    #
    # @param value the value to set the attribute skip_html_injection to.
    def skip_html_injection=(_arg0); end

    # Returns the value of attribute skip_http_headers.
    def skip_http_headers; end

    # Sets the attribute skip_http_headers
    #
    # @param value the value to set the attribute skip_http_headers to.
    def skip_http_headers=(_arg0); end

    def slack=(arg); end
    def stacktrace_excludes; end

    # Sets the attribute stacktrace_excludes
    #
    # @param value the value to set the attribute stacktrace_excludes to.
    def stacktrace_excludes=(_arg0); end

    def stacktrace_includes; end

    # Sets the attribute stacktrace_includes
    #
    # @param value the value to set the attribute stacktrace_includes to.
    def stacktrace_includes=(_arg0); end

    # @return [Boolean]
    def start?; end

    def start_request; end
    def terminal_notifier=(arg); end
    def text_notifications; end

    # Sets the attribute unused_eager_loading_enable
    #
    # @param value the value to set the attribute unused_eager_loading_enable to.
    def unused_eager_loading_enable=(_arg0); end

    # @return [Boolean]
    def unused_eager_loading_enable?; end

    def warnings; end
    def xmpp=(arg); end

    private

    def build_request_uri(env); end
    def for_each_active_notifier_with_notification; end
  end
end

module Bullet::ActiveJob
  class << self
    # @private
    def included(base); end
  end
end

module Bullet::ActiveRecord
  class << self
    def enable; end
  end
end

class Bullet::BulletRailtie < ::Rails::Railtie; end

module Bullet::Dependency
  # @return [Boolean]
  def active_record40?; end

  # @return [Boolean]
  def active_record41?; end

  # @return [Boolean]
  def active_record42?; end

  # @return [Boolean]
  def active_record4?; end

  # @return [Boolean]
  def active_record50?; end

  # @return [Boolean]
  def active_record51?; end

  # @return [Boolean]
  def active_record52?; end

  # @return [Boolean]
  def active_record5?; end

  # @return [Boolean]
  def active_record60?; end

  # @return [Boolean]
  def active_record61?; end

  # @return [Boolean]
  def active_record6?; end

  # @return [Boolean]
  def active_record70?; end

  # @return [Boolean]
  def active_record7?; end

  # @return [Boolean]
  def active_record?; end

  def active_record_version; end

  # @return [Boolean]
  def mongoid4x?; end

  # @return [Boolean]
  def mongoid5x?; end

  # @return [Boolean]
  def mongoid6x?; end

  # @return [Boolean]
  def mongoid7x?; end

  # @return [Boolean]
  def mongoid?; end

  def mongoid_version; end
end

module Bullet::Detector; end

class Bullet::Detector::Association < ::Bullet::Detector::Base
  class << self
    def add_call_object_associations(object, associations); end
    def add_object_associations(object, associations); end

    # impossible_objects keep the class to objects relationships
    # that the objects may not cause N+1 query.
    # e.g. { Post => ["Post:1", "Post:2"] }
    # if find collection returns only one object, then the object is impossible object,
    # impossible_objects are used to avoid treating 1+1 query to N+1 query.
    def impossible_objects; end

    # possible_objects keep the class to object relationships
    # that the objects may cause N+1 query.
    # e.g. { Post => ["Post:1", "Post:2"] }
    def possible_objects; end

    private

    # call_object_associations keep the object relationships
    # that object.associations is called.
    # e.g. { "Post:1" => [:comments] }
    # they are used to detect unused preload associations.
    def call_object_associations; end

    # eager_loadings keep the object relationships
    # that the associations are preloaded by find :include.
    # e.g. { ["Post:1", "Post:2"] => [:comments, :user] }
    def eager_loadings; end

    # inversed_objects keeps object relationships
    # that association is inversed.
    # e.g. { "Comment:1" => ["post"] }
    def inversed_objects; end

    # object_associations keep the object relationships
    # that the object has many associations.
    # e.g. { "Post:1" => [:comments] }
    # the object_associations keep all associations that may be or may no be
    # unpreload associations or unused preload associations.
    def object_associations; end
  end
end

class Bullet::Detector::Base; end

class Bullet::Detector::CounterCache < ::Bullet::Detector::Base
  class << self
    def add_counter_cache(object, associations); end
    def add_impossible_object(object); end
    def add_possible_objects(object_or_objects); end

    # @return [Boolean]
    def conditions_met?(object, _associations); end

    def impossible_objects; end
    def possible_objects; end

    private

    def create_notification(klazz, associations); end
  end
end

class Bullet::Detector::NPlusOneQuery < ::Bullet::Detector::Association
  extend ::Bullet::Dependency
  extend ::Bullet::StackTraceFilter

  class << self
    def add_impossible_object(object); end
    def add_inversed_object(object, association); end
    def add_possible_objects(object_or_objects); end

    # check if object => associations already exists in object_associations.
    #
    # @return [Boolean]
    def association?(object, associations); end

    # executed when object.assocations is called.
    # first, it keeps this method call for object.association.
    # then, it checks if this associations call is unpreload.
    #   if it is, keeps this unpreload associations and caller.
    def call_association(object, associations); end

    # decide whether the object.associations is unpreloaded or not.
    #
    # @return [Boolean]
    def conditions_met?(object, associations); end

    # @return [Boolean]
    def impossible?(object); end

    # @return [Boolean]
    def possible?(object); end

    private

    def create_notification(callers, klazz, associations); end
  end
end

class Bullet::Detector::UnusedEagerLoading < ::Bullet::Detector::Association
  extend ::Bullet::Dependency
  extend ::Bullet::StackTraceFilter

  class << self
    def add_eager_loadings(objects, associations); end

    # check if there are unused preload associations.
    #   get related_objects from eager_loadings associated with object and associations
    #   get call_object_association from associations of call_object_associations whose object is in related_objects
    #   if association not in call_object_association, then the object => association - call_object_association is ununsed preload assocations
    def check_unused_preload_associations; end

    private

    def call_associations(bullet_key, associations); end
    def create_notification(callers, klazz, associations); end
    def diff_object_associations(bullet_key, associations); end
  end
end

module Bullet::Notification; end

class Bullet::Notification::Base
  # @return [Base] a new instance of Base
  def initialize(base_class, association_or_associations, path = T.unsafe(nil)); end

  # Returns the value of attribute associations.
  def associations; end

  # Returns the value of attribute base_class.
  def base_class; end

  # @raise [NoMethodError]
  def body; end

  def body_with_caller; end
  def call_stack_messages; end

  # @return [Boolean]
  def eql?(other); end

  def hash; end
  def notification_data; end

  # Returns the value of attribute notifier.
  def notifier; end

  # Sets the attribute notifier
  #
  # @param value the value to set the attribute notifier to.
  def notifier=(_arg0); end

  def notify_inline; end
  def notify_out_of_channel; end

  # Returns the value of attribute path.
  def path; end

  def short_notice; end

  # @raise [NoMethodError]
  def title; end

  # Returns the value of attribute url.
  def url; end

  # Sets the attribute url
  #
  # @param value the value to set the attribute url to.
  def url=(_arg0); end

  def whoami; end

  protected

  def associations_str; end
  def klazz_associations_str; end
end

class Bullet::Notification::CounterCache < ::Bullet::Notification::Base
  def body; end
  def title; end
end

class Bullet::Notification::NPlusOneQuery < ::Bullet::Notification::Base
  # @return [NPlusOneQuery] a new instance of NPlusOneQuery
  def initialize(callers, base_class, associations, path = T.unsafe(nil)); end

  def body; end
  def notification_data; end
  def title; end

  protected

  def call_stack_messages; end
end

class Bullet::Notification::UnoptimizedQueryError < ::StandardError; end

class Bullet::Notification::UnusedEagerLoading < ::Bullet::Notification::Base
  # @return [UnusedEagerLoading] a new instance of UnusedEagerLoading
  def initialize(callers, base_class, associations, path = T.unsafe(nil)); end

  def body; end
  def notification_data; end
  def title; end

  protected

  def call_stack_messages; end
end

class Bullet::NotificationCollector
  # @return [NotificationCollector] a new instance of NotificationCollector
  def initialize; end

  def add(value); end

  # Returns the value of attribute collection.
  def collection; end

  # @return [Boolean]
  def notifications_present?; end

  def reset; end
end

class Bullet::Rack
  include ::Bullet::Dependency

  # @return [Rack] a new instance of Rack
  def initialize(app); end

  def append_to_html_body(response_body, content); end
  def call(env); end

  # fix issue if response's body is a Proc
  #
  # @return [Boolean]
  def empty?(response); end

  # @return [Boolean]
  def file?(headers); end

  def footer_note; end

  # @return [Boolean]
  def html_request?(headers, response); end

  def response_body(response); end
  def set_header(headers, header_name, header_array); end

  # @return [Boolean]
  def sse?(headers); end

  private

  def details_attributes; end
  def footer_console_message; end
  def footer_content_attributes; end
  def summary_attributes; end

  # Make footer work for XHR requests by appending data to the footer
  def xhr_script; end
end

module Bullet::Registry; end

class Bullet::Registry::Association < ::Bullet::Registry::Base
  def merge(base, associations); end
  def similarly_associated(base, associations); end
end

class Bullet::Registry::Base
  # @return [Base] a new instance of Base
  def initialize; end

  def [](key); end
  def add(key, value); end
  def delete(base); end
  def each(&block); end

  # @return [Boolean]
  def include?(key, value); end

  # Returns the value of attribute registry.
  def registry; end

  def select(*args, &block); end
end

class Bullet::Registry::Object < ::Bullet::Registry::Base
  def add(bullet_key); end

  # @return [Boolean]
  def include?(bullet_key); end
end

module Bullet::SaveWithBulletSupport
  def _create_record(*_arg0); end
end

module Bullet::StackTraceFilter
  def caller_in_project; end

  # @return [Boolean]
  def excluded_stacktrace_path?; end

  private

  def location_as_path(location); end

  # @return [Boolean]
  def pattern_matches?(location, pattern); end

  def select_caller_locations; end
end

Bullet::StackTraceFilter::VENDOR_PATH = T.let(T.unsafe(nil), String)

# Object is the default root of all Ruby objects.  Object inherits from
# BasicObject which allows creating alternate object hierarchies.  Methods
# on Object are available to all classes unless explicitly overridden.
#
# Object mixes in the Kernel module, making the built-in kernel functions
# globally accessible.  Although the instance methods of Object are defined
# by the Kernel module, we have chosen to document them here for clarity.
#
# When referencing constants in classes inheriting from Object you do not
# need to use the full namespace.  For example, referencing +File+ inside
# +YourClass+ will find the top-level File class.
#
# In the descriptions of Object's methods, the parameter <i>symbol</i> refers
# to a symbol, which is either a quoted string or a Symbol (such as
# <code>:name</code>).
#
# == What's Here
#
# First, what's elsewhere. \Class \Object:
#
# - Inherits from {class BasicObject}[BasicObject.html#class-BasicObject-label-What-27s+Here].
# - Includes {module Kernel}[Kernel.html#module-Kernel-label-What-27s+Here].
#
# Here, class \Object provides methods for:
#
# - {Querying}[#class-Object-label-Querying]
# - {Instance Variables}[#class-Object-label-Instance+Variables]
# - {Other}[#class-Object-label-Other]
#
# === Querying
#
# - {!~}[#method-i-21~]:: Returns +true+ if +self+ does not match the given object,
#                         otherwise +false+.
# - {<=>}[#method-i-3C-3D-3E]:: Returns 0 if +self+ and the given object +object+
#                               are the same object, or if
#                               <tt>self == object</tt>; otherwise returns +nil+.
# - #===:: Implements case equality, effectively the same as calling #==.
# - #eql?:: Implements hash equality, effectively the same as calling #==.
# - #kind_of? (aliased as #is_a?):: Returns whether given argument is an ancestor
#                                   of the singleton class of +self+.
# - #instance_of?:: Returns whether +self+ is an instance of the given class.
# - #instance_variable_defined?:: Returns whether the given instance variable
#                                 is defined in +self+.
# - #method:: Returns the Method object for the given method in +self+.
# - #methods:: Returns an array of symbol names of public and protected methods
#              in +self+.
# - #nil?:: Returns +false+. (Only +nil+ responds +true+ to method <tt>nil?</tt>.)
# - #object_id:: Returns an integer corresponding to +self+ that is unique
#                for the current process
# - #private_methods:: Returns an array of the symbol names
#                      of the private methods in +self+.
# - #protected_methods:: Returns an array of the symbol names
#                        of the protected methods in +self+.
# - #public_method:: Returns the Method object for the given public method in +self+.
# - #public_methods:: Returns an array of the symbol names
#                     of the public methods in +self+.
# - #respond_to?:: Returns whether +self+ responds to the given method.
# - #singleton_class:: Returns the singleton class of +self+.
# - #singleton_method:: Returns the Method object for the given singleton method
#                       in +self+.
# - #singleton_methods:: Returns an array of the symbol names
#                        of the singleton methods in +self+.
#
# - #define_singleton_method:: Defines a singleton method in +self+
#                              for the given symbol method-name and block or proc.
# - #extend:: Includes the given modules in the singleton class of +self+.
# - #public_send:: Calls the given public method in +self+ with the given argument.
# - #send:: Calls the given method in +self+ with the given argument.
#
# === Instance Variables
#
# - #instance_variable_get:: Returns the value of the given instance variable
#                            in +self+, or +nil+ if the instance variable is not set.
# - #instance_variable_set:: Sets the value of the given instance variable in +self+
#                            to the given object.
# - #instance_variables:: Returns an array of the symbol names
#                         of the instance variables in +self+.
# - #remove_instance_variable:: Removes the named instance variable from +self+.
#
# === Other
#
# - #clone::  Returns a shallow copy of +self+, including singleton class
#             and frozen state.
# - #define_singleton_method:: Defines a singleton method in +self+
#                              for the given symbol method-name and block or proc.
# - #display:: Prints +self+ to the given \IO stream or <tt>$stdout</tt>.
# - #dup:: Returns a shallow unfrozen copy of +self+.
# - #enum_for (aliased as #to_enum):: Returns an Enumerator for +self+
#                                     using the using the given method,
#                                     arguments, and block.
# - #extend:: Includes the given modules in the singleton class of +self+.
# - #freeze:: Prevents further modifications to +self+.
# - #hash:: Returns the integer hash value for +self+.
# - #inspect:: Returns a human-readable  string representation of +self+.
# - #itself:: Returns +self+.
# - #public_send:: Calls the given public method in +self+ with the given argument.
# - #send:: Calls the given method in +self+ with the given argument.
# - #to_s:: Returns a string representation of +self+.
class Object < ::BasicObject
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::ActiveSupport::Dependencies::RequireDependency
  include ::Kernel
  include ::DEBUGGER__::TrapInterceptor
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::ActiveSupport::Tryable
  include ::InteractiveEditor::Editors
  include ::PP::ObjectMixin
  include ::WrappedPrint::Main

  def bullet_key; end
  def bullet_primary_key_value; end
end

class String
  include ::Comparable
  include ::JSON::Ext::Generator::GeneratorMethods::String
  include ::MessagePack::CoreExt
  extend ::JSON::Ext::Generator::GeneratorMethods::String::Extend

  def bullet_class_name; end
end

String::BLANK_RE = T.let(T.unsafe(nil), Regexp)
String::ENCODED_BLANKS = T.let(T.unsafe(nil), Concurrent::Map)
