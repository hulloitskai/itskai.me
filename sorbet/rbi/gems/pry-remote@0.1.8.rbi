# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pry-remote` gem.
# Please instead update this file by running `bin/tapioca gem pry-remote`.

::RUBY19 = T.let(T.unsafe(nil), TrueClass)

# Object is the default root of all Ruby objects.  Object inherits from
# BasicObject which allows creating alternate object hierarchies.  Methods
# on Object are available to all classes unless explicitly overridden.
#
# Object mixes in the Kernel module, making the built-in kernel functions
# globally accessible.  Although the instance methods of Object are defined
# by the Kernel module, we have chosen to document them here for clarity.
#
# When referencing constants in classes inheriting from Object you do not
# need to use the full namespace.  For example, referencing +File+ inside
# +YourClass+ will find the top-level File class.
#
# In the descriptions of Object's methods, the parameter <i>symbol</i> refers
# to a symbol, which is either a quoted string or a Symbol (such as
# <code>:name</code>).
#
# == What's Here
#
# First, what's elsewhere. \Class \Object:
#
# - Inherits from {class BasicObject}[BasicObject.html#class-BasicObject-label-What-27s+Here].
# - Includes {module Kernel}[Kernel.html#module-Kernel-label-What-27s+Here].
#
# Here, class \Object provides methods for:
#
# - {Querying}[#class-Object-label-Querying]
# - {Instance Variables}[#class-Object-label-Instance+Variables]
# - {Other}[#class-Object-label-Other]
#
# === Querying
#
# - {!~}[#method-i-21~]:: Returns +true+ if +self+ does not match the given object,
#                         otherwise +false+.
# - {<=>}[#method-i-3C-3D-3E]:: Returns 0 if +self+ and the given object +object+
#                               are the same object, or if
#                               <tt>self == object</tt>; otherwise returns +nil+.
# - #===:: Implements case equality, effectively the same as calling #==.
# - #eql?:: Implements hash equality, effectively the same as calling #==.
# - #kind_of? (aliased as #is_a?):: Returns whether given argument is an ancestor
#                                   of the singleton class of +self+.
# - #instance_of?:: Returns whether +self+ is an instance of the given class.
# - #instance_variable_defined?:: Returns whether the given instance variable
#                                 is defined in +self+.
# - #method:: Returns the Method object for the given method in +self+.
# - #methods:: Returns an array of symbol names of public and protected methods
#              in +self+.
# - #nil?:: Returns +false+. (Only +nil+ responds +true+ to method <tt>nil?</tt>.)
# - #object_id:: Returns an integer corresponding to +self+ that is unique
#                for the current process
# - #private_methods:: Returns an array of the symbol names
#                      of the private methods in +self+.
# - #protected_methods:: Returns an array of the symbol names
#                        of the protected methods in +self+.
# - #public_method:: Returns the Method object for the given public method in +self+.
# - #public_methods:: Returns an array of the symbol names
#                     of the public methods in +self+.
# - #respond_to?:: Returns whether +self+ responds to the given method.
# - #singleton_class:: Returns the singleton class of +self+.
# - #singleton_method:: Returns the Method object for the given singleton method
#                       in +self+.
# - #singleton_methods:: Returns an array of the symbol names
#                        of the singleton methods in +self+.
#
# - #define_singleton_method:: Defines a singleton method in +self+
#                              for the given symbol method-name and block or proc.
# - #extend:: Includes the given modules in the singleton class of +self+.
# - #public_send:: Calls the given public method in +self+ with the given argument.
# - #send:: Calls the given method in +self+ with the given argument.
#
# === Instance Variables
#
# - #instance_variable_get:: Returns the value of the given instance variable
#                            in +self+, or +nil+ if the instance variable is not set.
# - #instance_variable_set:: Sets the value of the given instance variable in +self+
#                            to the given object.
# - #instance_variables:: Returns an array of the symbol names
#                         of the instance variables in +self+.
# - #remove_instance_variable:: Removes the named instance variable from +self+.
#
# === Other
#
# - #clone::  Returns a shallow copy of +self+, including singleton class
#             and frozen state.
# - #define_singleton_method:: Defines a singleton method in +self+
#                              for the given symbol method-name and block or proc.
# - #display:: Prints +self+ to the given \IO stream or <tt>$stdout</tt>.
# - #dup:: Returns a shallow unfrozen copy of +self+.
# - #enum_for (aliased as #to_enum):: Returns an Enumerator for +self+
#                                     using the using the given method,
#                                     arguments, and block.
# - #extend:: Includes the given modules in the singleton class of +self+.
# - #freeze:: Prevents further modifications to +self+.
# - #hash:: Returns the integer hash value for +self+.
# - #inspect:: Returns a human-readable  string representation of +self+.
# - #itself:: Returns +self+.
# - #public_send:: Calls the given public method in +self+ with the given argument.
# - #send:: Calls the given method in +self+ with the given argument.
# - #to_s:: Returns a string representation of +self+.
class Object < ::BasicObject
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::ActiveSupport::Dependencies::RequireDependency
  include ::Kernel
  include ::DEBUGGER__::TrapInterceptor
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::ActiveSupport::Tryable
  include ::InteractiveEditor::Editors
  include ::PP::ObjectMixin
  include ::WrappedPrint::Main

  # Starts a remote Pry session
  # a handy alias as many people may think the method is named after the gem
  # (pry-remote)
  #
  # @param host [String] Host of the server
  # @param port [Integer] Port of the server
  # @param options [Hash] Options to be passed to Pry.start
  def pry_remote(host = T.unsafe(nil), port = T.unsafe(nil), options = T.unsafe(nil)); end

  # Starts a remote Pry session
  #
  # @param host [String] Host of the server
  # @param port [Integer] Port of the server
  # @param options [Hash] Options to be passed to Pry.start
  def remote_pry(host = T.unsafe(nil), port = T.unsafe(nil), options = T.unsafe(nil)); end
end

module PryRemote; end

# Parses arguments and allows to start the client.
class PryRemote::CLI
  # @return [CLI] a new instance of CLI
  def initialize(args = T.unsafe(nil)); end

  # Returns the value of attribute capture.
  def capture; end

  # Returns the value of attribute capture.
  def capture?; end

  # @return [String] Host of the server
  def host; end

  # @return [Integer] Port of the server
  def port; end

  # Connects to the server
  #
  # @param input [IO] Object holding input for pry-remote
  # @param output [IO] Object pry-debug will send its output to
  def run(input = T.unsafe(nil), output = T.unsafe(nil)); end

  # @return [String] URI for DRb
  def uri; end

  # Returns the value of attribute wait.
  def wait; end

  # Returns the value of attribute wait.
  def wait?; end
end

# A client is used to retrieve information from the client program.
class PryRemote::Client < ::Struct
  # Returns the value of attribute input
  #
  # @return [Object] the current value of input
  def input; end

  # Sets the attribute input
  #
  # @param value [Object] the value to set the attribute input to.
  # @return [Object] the newly set value
  def input=(_); end

  # @return [InputProxy] Proxy for the input
  def input_proxy; end

  # Tells the client the session is terminated
  def kill; end

  # Returns the value of attribute output
  #
  # @return [Object] the current value of output
  def output; end

  # Sets the attribute output
  #
  # @param value [Object] the value to set the attribute output to.
  # @return [Object] the newly set value
  def output=(_); end

  # Returns the value of attribute stderr
  #
  # @return [Object] the current value of stderr
  def stderr; end

  # Sets the attribute stderr
  #
  # @param value [Object] the value to set the attribute stderr to.
  # @return [Object] the newly set value
  def stderr=(_); end

  # Returns the value of attribute stdout
  #
  # @return [Object] the current value of stdout
  def stdout; end

  # Sets the attribute stdout
  #
  # @param value [Object] the value to set the attribute stdout to.
  # @return [Object] the newly set value
  def stdout=(_); end

  # Returns the value of attribute thread
  #
  # @return [Object] the current value of thread
  def thread; end

  # Sets the attribute thread
  #
  # @param value [Object] the value to set the attribute thread to.
  # @return [Object] the newly set value
  def thread=(_); end

  # Waits until both an input and output are set
  def wait; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

PryRemote::DefaultHost = T.let(T.unsafe(nil), String)
PryRemote::DefaultPort = T.let(T.unsafe(nil), Integer)

# Class used to wrap inputs so that they can be sent through DRb.
#
# This is to ensure the input is used locally and not reconstructed on the
# server by DRb.
class PryRemote::IOUndumpedProxy
  include ::DRb::DRbUndumped

  # @return [IOUndumpedProxy] a new instance of IOUndumpedProxy
  def initialize(obj); end

  def <<(data); end
  def completion_proc; end
  def completion_proc=(val); end
  def print(*objs); end
  def printf(*args); end
  def puts(*lines); end
  def readline(prompt); end

  # Some versions of Pry expect $stdout or its output objects to respond to
  # this message.
  #
  # @return [Boolean]
  def tty?; end

  def write(data); end
end

# A class to represent an input object created from DRb. This is used because
# Pry checks for arity to know if a prompt should be passed to the object.
#
# @attr input [#readline] Object to proxy
class PryRemote::InputProxy < ::Struct
  def completion_proc=(val); end

  # Object to proxy
  #
  # @return [#readline] the current value of input
  def input; end

  # Object to proxy
  #
  # @param value [#readline] the value to set the attribute input to.
  # @return [#readline] the newly set value
  def input=(_); end

  # Reads a line from the input
  def readline(prompt); end

  def readline_arity; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class PryRemote::Server
  # @return [Server] a new instance of Server
  def initialize(object, host = T.unsafe(nil), port = T.unsafe(nil), options = T.unsafe(nil)); end

  # @return [PryServer::Client] Client connecting to the pry-remote server
  def client; end

  # @return [String] Host of the server
  def host; end

  # @return Object to enter into
  def object; end

  # @return [Integer] Port of the server
  def port; end

  # Actually runs pry-remote
  def run; end

  # Code that has to be called for Pry-remote to work properly
  def setup; end

  # Code that has to be called after setup to return to the initial state
  def teardown; end

  # @return [String] URI for DRb
  def uri; end

  class << self
    def run(object, host = T.unsafe(nil), port = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# Ensure that system (shell command) output is redirected for remote session.
PryRemote::System = T.let(T.unsafe(nil), Proc)
